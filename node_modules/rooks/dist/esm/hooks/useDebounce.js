import debounce from "lodash.debounce";
import { useRef, useEffect, useCallback } from "react";
/**
 * Debounce hook
 * Debounces a function
 *
 * @param {Function} callback The callback to debounce
 * @param {number} wait The duration to debounce
 * @returns {Function} The debounced callback
 */
function useDebounce(callback, wait, options) {
    var createDebouncedCallback = useCallback(function (function_) {
        return debounce(function_, wait, options);
    }, [wait, options]);
    var callbackRef = useRef(callback);
    var debouncedCallbackRef = useRef(createDebouncedCallback(callback));
    useEffect(function () {
        callbackRef.current = callback;
    });
    useEffect(function () {
        debouncedCallbackRef.current = createDebouncedCallback(callbackRef.current);
    }, [wait, options, createDebouncedCallback]);
    return debouncedCallbackRef.current;
}
export { useDebounce };
