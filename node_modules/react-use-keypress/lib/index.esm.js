import { useRef, useEffect } from 'react';
import invariant from 'tiny-invariant';

// Fixing inconsistencies from older browsers
// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
var aliases = new Map([['Win', 'Meta'], ['Scroll', 'ScrollLock'], ['Spacebar', ' '], ['Down', 'ArrowDown'], ['Left', 'ArrowLeft'], ['Right', 'ArrowRight'], ['Up', 'ArrowUp'], ['Del', 'Delete'], ['Crsel', 'CrSel'], ['Exsel', 'ExSel'], ['Apps', 'ContextMenu'], ['Esc', 'Escape'], ['Decimal', '.'], ['Multiply', '*'], ['Add', '+'], ['Subtract', '-'], ['Divide', '/']]);

var shimKeyboardEvent = function shimKeyboardEvent(event) {
  if (aliases.has(event.key)) {
    var key = aliases.get(event.key);
    Object.defineProperty(event, 'key', {
      configurable: true,
      enumerable: true,
      get: function get() {
        return key;
      }
    });
  }
};

var useKeypress = function useKeypress(keys, handler) {
  !(Array.isArray(keys) || typeof keys === 'string') ? process.env.NODE_ENV !== "production" ? invariant(false, 'Expected `keys` to be an array or string') : invariant(false) : void 0;

  if (Array.isArray(keys)) {
    keys.forEach(function (key, i) {
      !(typeof key === 'string') ? process.env.NODE_ENV !== "production" ? invariant(false, "Expected `keys[" + i + "]` to be a string") : invariant(false) : void 0;
    });
  }

  !(typeof handler === 'function' || handler == null) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Expected `handler` to be a function') : invariant(false) : void 0;
  var eventListenerRef = useRef();
  useEffect(function () {
    eventListenerRef.current = function (event) {
      shimKeyboardEvent(event);

      if (Array.isArray(keys) ? keys.includes(event.key) : keys === event.key) {
        handler == null ? void 0 : handler(event);
      }
    };
  }, [keys, handler]);
  useEffect(function () {
    var eventListener = function eventListener(event) {
      eventListenerRef.current(event);
    };

    window.addEventListener('keydown', eventListener);
    return function () {
      window.removeEventListener('keydown', eventListener);
    };
  }, []);
};

export default useKeypress;
//# sourceMappingURL=index.esm.js.map
